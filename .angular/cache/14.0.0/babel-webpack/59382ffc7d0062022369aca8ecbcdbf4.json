{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\n\nfunction CheckboxGroupComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"input\", 6);\n    i0.ɵɵlistener(\"change\", function CheckboxGroupComponent_div_3_Template_input_change_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onCheckChange($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 7);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const opt_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", opt_r2.key)(\"checked\", ctx_r0.checkChecked(opt_r2.key, ctx_r0.field.value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(opt_r2.label);\n  }\n}\n\nfunction CheckboxGroupComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.field.validationMessage, \" \");\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\n\nexport let CheckboxGroupComponent = /*#__PURE__*/(() => {\n  class CheckboxGroupComponent {\n    constructor() {\n      this.field = {};\n      this.isEmpty = true;\n    }\n\n    get isValid() {\n      return this.form.controls[this.field.name].valid;\n    }\n\n    get isDirty() {\n      return this.form.controls[this.field.name].dirty;\n    }\n\n    get isTouched() {\n      return this.form.controls[this.field.name].touched;\n    }\n\n    get isErrors() {\n      return this.form.controls[this.field.name].errors;\n    }\n\n    ngOnInit() {\n      this.checkIsEmpty();\n    }\n\n    checkChecked(key, value) {\n      if (value[key]) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    onCheckChange(event) {\n      if (this.field.value[event.target.value]) {\n        this.field.value[event.target.value] = false;\n      } else {\n        this.field.value[event.target.value] = true;\n      }\n\n      this.checkIsEmpty();\n    }\n\n    checkIsEmpty() {\n      for (let val in this.field.value) {\n        if (this.field.value[val]) {\n          this.isEmpty = false;\n          break;\n        } else {\n          this.isEmpty = true;\n        }\n      }\n    }\n\n  }\n\n  CheckboxGroupComponent.ɵfac = function CheckboxGroupComponent_Factory(t) {\n    return new (t || CheckboxGroupComponent)();\n  };\n\n  CheckboxGroupComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CheckboxGroupComponent,\n    selectors: [[\"lib-checkbox-group\"]],\n    inputs: {\n      field: \"field\",\n      form: \"form\"\n    },\n    decls: 5,\n    vars: 8,\n    consts: [[3, \"formGroup\"], [3, \"formGroupName\"], [1, \"form-group\", \"form-check\", 3, \"ngClass\"], [\"class\", \"pad-bot\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [1, \"pad-bot\"], [\"id\", \"opt.key\", \"type\", \"checkbox\", 1, \"form-check-input\", 3, \"value\", \"checked\", \"change\"], [1, \"form-check-label\"], [1, \"invalid-feedback\"]],\n    template: function CheckboxGroupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵtemplate(3, CheckboxGroupComponent_div_3_Template, 4, 3, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, CheckboxGroupComponent_div_4_Template, 2, 1, \"div\", 4);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroupName\", ctx.field.name);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c0, ctx.isTouched && ctx.isEmpty))(\"ngClass\", ctx.field.style === \"row\" ? \"f-row\" : \"f-column\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.field.options);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.field.validationMessage && ctx.field.required);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormGroupName]\n  });\n  return CheckboxGroupComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}