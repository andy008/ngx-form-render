{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let DragdropDirective = /*#__PURE__*/(() => {\n  class DragdropDirective {\n    constructor() {\n      this.border = '2px dashed #c0c4c7';\n      this.opacity = '1';\n      this.onFileDropped = new EventEmitter();\n    }\n\n    onDragOver(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.border = '2px solid darkblue';\n      this.opacity = '0.8';\n    }\n\n    onDragLeave(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.border = '2px dashed #c0c4c7';\n      this.opacity = '1';\n    }\n\n    onDrop(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.border = '2px dashed #c0c4c7';\n      this.opacity = '1';\n      let files = event.dataTransfer.files;\n\n      if (files.length > 0) {\n        this.onFileDropped.emit(files);\n      }\n    }\n\n  }\n\n  DragdropDirective.ɵfac = function DragdropDirective_Factory(t) {\n    return new (t || DragdropDirective)();\n  };\n\n  DragdropDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: DragdropDirective,\n    selectors: [[\"\", \"libDragdrop\", \"\"]],\n    hostVars: 4,\n    hostBindings: function DragdropDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"dragover\", function DragdropDirective_dragover_HostBindingHandler($event) {\n          return ctx.onDragOver($event);\n        })(\"dragleave\", function DragdropDirective_dragleave_HostBindingHandler($event) {\n          return ctx.onDragLeave($event);\n        })(\"drop\", function DragdropDirective_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"border\", ctx.border)(\"opacity\", ctx.opacity);\n      }\n    },\n    outputs: {\n      onFileDropped: \"onFileDropped\"\n    }\n  });\n  return DragdropDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}