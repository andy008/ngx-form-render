{"version":3,"file":"fs.js","sourceRoot":"","sources":["../../../src/lib/utils/fs.ts"],"names":[],"mappings":";;;AAAA,+BAAiC;AACjC,6BAA6B;AAC7B,yBAAyB;AACzB,+BAA+B;AAElB,QAAA,MAAM,GAAG,gBAAS,CAAC,EAAE,CAAC,CAAC;AACvB,QAAA,QAAQ,GAAG,gBAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;AAClC,QAAA,SAAS,GAAG,gBAAS,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;AACpC,QAAA,MAAM,GAAG,gBAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;AAC9B,QAAA,KAAK,GAAG,gBAAS,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;AAC5B,QAAA,IAAI,GAAG,gBAAS,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;AAEhC,KAAK,UAAU,MAAM,CAAC,IAAiB;IAC5C,IAAI;QACF,MAAM,cAAM,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEtC,OAAO,IAAI,CAAC;KACb;IAAC,WAAM;QACN,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AARD,wBAQC;AAED,MAAM,MAAM,GAAG,gBAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;AAC/B,KAAK,UAAU,QAAQ,CAAC,GAAW,EAAE,IAAY;IACtD,MAAM,GAAG,GAAG,cAAO,CAAC,IAAI,CAAC,CAAC;IAC1B,IAAI,CAAC,CAAC,MAAM,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;QACxB,MAAM,aAAK,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;KACvC;IAED,MAAM,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;AACzD,CAAC;AAPD,4BAOC","sourcesContent":["import { promisify } from 'util';\nimport * as rm from 'rimraf';\nimport * as fs from 'fs';\nimport { dirname } from 'path';\n\nexport const rimraf = promisify(rm);\nexport const readFile = promisify(fs.readFile);\nexport const writeFile = promisify(fs.writeFile);\nexport const access = promisify(fs.access);\nexport const mkdir = promisify(fs.mkdir);\nexport const stat = promisify(fs.stat);\n\nexport async function exists(path: fs.PathLike): Promise<boolean> {\n  try {\n    await access(path, fs.constants.F_OK);\n\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nconst cpFile = promisify(fs.copyFile);\nexport async function copyFile(src: string, dest: string): Promise<void> {\n  const dir = dirname(dest);\n  if (!(await exists(dir))) {\n    await mkdir(dir, { recursive: true });\n  }\n\n  await cpFile(src, dest, fs.constants.COPYFILE_FICLONE);\n}\n"]}