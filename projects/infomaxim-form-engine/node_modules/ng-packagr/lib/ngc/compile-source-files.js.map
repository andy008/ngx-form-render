{"version":3,"file":"compile-source-files.js","sourceRoot":"","sources":["../../../src/lib/ngc/compile-source-files.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ng from '@angular/compiler-cli';\nimport * as ts from 'typescript';\nimport * as log from '../utils/log';\nimport { cacheCompilerHost } from '../ts/cache-compiler-host';\nimport { StylesheetProcessor } from '../styles/stylesheet-processor';\nimport { BuildGraph } from '../graph/build-graph';\nimport { EntryPointNode, isEntryPointInProgress } from '../ng-package/nodes';\nimport { NgccProcessor } from './ngcc-processor';\nimport { ngccTransformCompilerHost } from '../ts/ngcc-transform-compiler-host';\n\nexport async function compileSourceFiles(\n  graph: BuildGraph,\n  tsConfig: ng.ParsedConfiguration,\n  moduleResolutionCache: ts.ModuleResolutionCache,\n  stylesheetProcessor: StylesheetProcessor,\n  extraOptions?: Partial<ng.CompilerOptions>,\n  ngccProcessor?: NgccProcessor,\n) {\n  log.debug(`ngc (v${ng.VERSION.full})`);\n\n  const tsConfigOptions: ng.CompilerOptions = { ...tsConfig.options, ...extraOptions };\n  const entryPoint: EntryPointNode = graph.find(isEntryPointInProgress());\n\n  let tsCompilerHost = cacheCompilerHost(\n    graph,\n    entryPoint,\n    tsConfigOptions,\n    moduleResolutionCache,\n    stylesheetProcessor,\n  );\n\n  if (tsConfigOptions.enableIvy && ngccProcessor) {\n    tsCompilerHost = ngccTransformCompilerHost(tsCompilerHost, tsConfigOptions, ngccProcessor, moduleResolutionCache);\n  }\n\n  // ng.CompilerHost\n  const ngCompilerHost = ng.createCompilerHost({\n    options: tsConfigOptions,\n    tsHost: tsCompilerHost,\n  });\n\n  const scriptTarget = tsConfigOptions.target;\n  const cache = entryPoint.cache;\n  const oldProgram = (cache.oldPrograms && cache.oldPrograms[scriptTarget]) as ng.Program | undefined;\n\n  const ngProgram = ng.createProgram({\n    rootNames: tsConfig.rootNames,\n    options: tsConfigOptions,\n    host: ngCompilerHost,\n    oldProgram,\n  });\n\n  await ngProgram.loadNgStructureAsync();\n\n  // TS 4.1+ stores the reuse state in the new program\n  const checkReuseProgram = (ts.versionMajorMinor as string) === '4.0' ? oldProgram : ngProgram;\n  log.debug(\n    `ngc program structure is reused: ${\n      checkReuseProgram ? (checkReuseProgram.getTsProgram() as any).structureIsReused : 'No old program'\n    }`,\n  );\n\n  cache.oldPrograms = { ...cache.oldPrograms, [scriptTarget]: ngProgram };\n\n  const allDiagnostics = [\n    ...ngProgram.getTsOptionDiagnostics(),\n    ...ngProgram.getNgOptionDiagnostics(),\n    ...ngProgram.getTsSyntacticDiagnostics(),\n    ...ngProgram.getTsSemanticDiagnostics(),\n    ...ngProgram.getNgSemanticDiagnostics(),\n    ...ngProgram.getNgStructuralDiagnostics(),\n  ];\n\n  // if we have an error we don't want to transpile.\n  const hasError = ng.exitCodeFromResult(allDiagnostics) > 0;\n  if (!hasError) {\n    const emitFlags = tsConfigOptions.declaration ? tsConfig.emitFlags : ng.EmitFlags.JS;\n    // certain errors are only emitted by a compilation hence append to previous diagnostics\n    const { diagnostics } = ngProgram.emit({\n      emitFlags,\n    });\n\n    allDiagnostics.push(...diagnostics);\n  }\n\n  if (allDiagnostics.length === 0) {\n    return;\n  }\n\n  const exitCode = ng.exitCodeFromResult(allDiagnostics);\n  const formattedDiagnostics = ng.formatDiagnostics(allDiagnostics);\n  if (exitCode !== 0) {\n    throw new Error(formattedDiagnostics);\n  } else {\n    log.msg(formattedDiagnostics);\n  }\n}\n"]}