{"version":3,"file":"stylesheet-processor-worker.js","sourceRoot":"","sources":["../../../src/lib/styles/stylesheet-processor-worker.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport * as autoprefixer from 'autoprefixer';\nimport postcss, { LazyResult } from 'postcss';\nimport * as postcssUrl from 'postcss-url';\nimport * as cssnano from 'cssnano';\n\nimport { CssUrl, WorkerOptions, WorkerResult } from './stylesheet-processor';\nimport { readFile } from '../utils/fs';\n\nasync function processCss({ filePath, browserslistData, cssUrl, styleIncludePaths, basePath }: WorkerOptions): Promise<WorkerResult> {\n  // Render pre-processor language (sass, styl, less)\n  const renderedCss = await renderCss(filePath, basePath, styleIncludePaths);\n\n  // Render postcss (autoprefixing and friends)\n  const result = await optimizeCss(filePath, renderedCss, browserslistData, cssUrl);\n\n  return {\n    css: result.css,\n    warnings: result.warnings().map(w => w.toString()),\n  };\n}\n\nasync function renderCss(filePath: string, basePath, styleIncludePaths?: string[]): Promise<string> {\n  const ext = path.extname(filePath);\n  const content = await readFile(filePath, 'utf8');\n\n  switch (ext) {\n    case '.sass':\n    case '.scss': {\n      /*\n       * Please be aware of the few differences in behaviour https://github.com/sass/dart-sass/blob/master/README.md#behavioral-differences-from-ruby-sass\n       * By default `npm install` will install sass.\n       * To use node-sass you need to use:\n       *   Npm:\n       *     `npm install node-sass --save-dev`\n       *   Yarn:\n       *     `yarn add node-sass --dev`\n       */\n      let sassCompiler: any | undefined;\n      try {\n        sassCompiler = require('node-sass'); // Check if node-sass is explicitly included.\n      } catch {\n        sassCompiler = await import('sass');\n      }\n\n      return sassCompiler\n        .renderSync({\n          file: filePath,\n          data: content,\n          indentedSyntax: '.sass' === ext,\n          importer: await import('node-sass-tilde-importer'),\n          includePaths: styleIncludePaths,\n        })\n        .css.toString();\n    }\n    case '.less': {\n      const { css } = await (await import('less')).render(content, {\n        filename: filePath,\n        javascriptEnabled: true,\n        paths: styleIncludePaths,\n      });\n\n      return css;\n    }\n    case '.styl':\n    case '.stylus': {\n      const stylus = await import('stylus');\n\n      return (\n        stylus(content)\n          // add paths for resolve\n          .set('paths', [basePath, '.', ...styleIncludePaths, 'node_modules'])\n          // add support for resolving plugins from node_modules\n          .set('filename', filePath)\n          // turn on url resolver in stylus, same as flag --resolve-url\n          .set('resolve url', true)\n          .define('url', stylus.resolver(undefined))\n          .render()\n      );\n    }\n    case '.css':\n    default:\n      return content;\n  }\n}\n\nfunction optimizeCss(filePath: string, css: string, browsers: string[], cssUrl?: CssUrl): LazyResult {\n  const postCssPlugins = [];\n\n  if (cssUrl !== CssUrl.none) {\n    postCssPlugins.push(postcssUrl({ url: cssUrl }));\n  }\n\n  // this is important to be executed post running `postcssUrl`\n  postCssPlugins.push(autoprefixer(browsers));\n\n  postCssPlugins.push(\n    cssnano({\n      preset: [\n        'default',\n        {\n          // Disable SVG optimizations, as this can cause optimizations which are not compatible in all browsers.\n          svgo: false,\n          // Disable `calc` optimizations, due to several issues. #16910, #16875, #17890\n          calc: false,\n        },\n      ],\n    }),\n  );\n\n  return postcss(postCssPlugins).process(css, {\n    from: filePath,\n    to: filePath.replace(path.extname(filePath), '.css'),\n  });\n}\n\n// default export for sync-rpc to recognize the function https://github.com/ForbesLindesay/sync-rpc#workerjs\nexport default () => processCss"]}